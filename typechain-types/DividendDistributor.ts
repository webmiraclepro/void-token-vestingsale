/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DividendDistributorInterface extends utils.Interface {
  contractName: "DividendDistributor";
  functions: {
    "claimDividend()": FunctionFragment;
    "deposit()": FunctionFragment;
    "dividendsPerShare()": FunctionFragment;
    "dividendsPerShareAccuracyFactor()": FunctionFragment;
    "getUnpaidEarnings(address)": FunctionFragment;
    "minDistribution()": FunctionFragment;
    "minPeriod()": FunctionFragment;
    "process(uint256)": FunctionFragment;
    "setDistributionCriteria(uint256,uint256)": FunctionFragment;
    "setShare(address,uint256)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "totalDistributed()": FunctionFragment;
    "totalDividends()": FunctionFragment;
    "totalShares()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimDividend",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dividendsPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dividendsPerShareAccuracyFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnpaidEarnings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minPeriod", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionCriteria",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShare",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dividendsPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendsPerShareAccuracyFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnpaidEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DividendDistributor extends BaseContract {
  contractName: "DividendDistributor";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DividendDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimDividend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dividendsPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    dividendsPerShareAccuracyFactor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnpaidEarnings(
      _shareholder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minDistribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    process(
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShare(
      shareholder: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        totalExcluded: BigNumber;
        totalRealised: BigNumber;
      }
    >;

    totalDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDividends(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claimDividend(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dividendsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  dividendsPerShareAccuracyFactor(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnpaidEarnings(
    _shareholder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minDistribution(overrides?: CallOverrides): Promise<BigNumber>;

  minPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  process(
    _gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionCriteria(
    _minPeriod: BigNumberish,
    _minDistribution: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShare(
    shareholder: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shares(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      totalExcluded: BigNumber;
      totalRealised: BigNumber;
    }
  >;

  totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  totalDividends(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claimDividend(overrides?: CallOverrides): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    dividendsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    dividendsPerShareAccuracyFactor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaidEarnings(
      _shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    minPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    process(_gas: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setShare(
      shareholder: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        totalExcluded: BigNumber;
        totalRealised: BigNumber;
      }
    >;

    totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalDividends(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    claimDividend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dividendsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    dividendsPerShareAccuracyFactor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaidEarnings(
      _shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    minPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    process(
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShare(
      shareholder: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalDividends(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimDividend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dividendsPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dividendsPerShareAccuracyFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnpaidEarnings(
      _shareholder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    process(
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShare(
      shareholder: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDistributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDividends(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
