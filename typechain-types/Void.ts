/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VoidInterface extends utils.Interface {
  contractName: "Void";
  functions: {
    "Collect()": FunctionFragment;
    "EP()": FunctionFragment;
    "MASK()": FunctionFragment;
    "VestingSaleAddress()": FunctionFragment;
    "WFTM()": FunctionFragment;
    "_maxTxAmount()": FunctionFragment;
    "_maxWallet()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveMax(address)": FunctionFragment;
    "authorize(address)": FunctionFragment;
    "autoBuybackEnabled()": FunctionFragment;
    "autoLiquidityReceiver()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkFree(address)": FunctionFragment;
    "clearBuybackMultiplier()": FunctionFragment;
    "decimals()": FunctionFragment;
    "developerFeeReceiver()": FunctionFragment;
    "distributorAddress()": FunctionFragment;
    "getCirculatingSupply()": FunctionFragment;
    "getLiquidityBacking(uint256)": FunctionFragment;
    "getTotalFee()": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "isFree(address)": FunctionFragment;
    "isOverLiquified(uint256,uint256)": FunctionFragment;
    "launch()": FunctionFragment;
    "launchedAt()": FunctionFragment;
    "launchedAtTimestamp()": FunctionFragment;
    "marketingFeeReceiver()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pair()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "routerAddress()": FunctionFragment;
    "setAutoBuybackSettings(bool,uint256,uint256,uint256)": FunctionFragment;
    "setBuybackMultiplierSettings(uint256,uint256,uint256)": FunctionFragment;
    "setDistributionCriteria(uint256,uint256)": FunctionFragment;
    "setDistributorSettings(uint256)": FunctionFragment;
    "setFeeReceivers(address,address,address)": FunctionFragment;
    "setFees(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setFree(address)": FunctionFragment;
    "setIsDividendExempt(address,bool)": FunctionFragment;
    "setIsFeeExempt(address,bool)": FunctionFragment;
    "setIsTxLimitExempt(address,bool)": FunctionFragment;
    "setMaxWallet(uint256)": FunctionFragment;
    "setRewardAmounts(uint256,uint256)": FunctionFragment;
    "setSwapBackSettings(bool,uint256)": FunctionFragment;
    "setTargetLiquidity(uint256,uint256)": FunctionFragment;
    "setTxLimit(uint256)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapThreshold()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasurerFeeReceiver()": FunctionFragment;
    "unSetFree(address)": FunctionFragment;
    "unauthorize(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Collect", values?: undefined): string;
  encodeFunctionData(functionFragment: "EP", values?: undefined): string;
  encodeFunctionData(functionFragment: "MASK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VestingSaleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WFTM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "approveMax", values: [string]): string;
  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "autoBuybackEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoLiquidityReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "checkFree", values: [string]): string;
  encodeFunctionData(
    functionFragment: "clearBuybackMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "developerFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCirculatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityBacking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isFree", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isOverLiquified",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "launch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "launchedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchedAtTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "routerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoBuybackSettings",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuybackMultiplierSettings",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionCriteria",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributorSettings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceivers",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "setFree", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIsDividendExempt",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsFeeExempt",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTxLimitExempt",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapBackSettings",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasurerFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unSetFree", values: [string]): string;
  encodeFunctionData(functionFragment: "unauthorize", values: [string]): string;

  decodeFunctionResult(functionFragment: "Collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MASK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VestingSaleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WFTM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoBuybackEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoLiquidityReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkFree", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearBuybackMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "developerFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFree", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOverLiquified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "launchedAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "launchedAtTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoBuybackSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuybackMultiplierSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributorSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFree", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsDividendExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTxLimitExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapBackSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTxLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasurerFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unSetFree", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unauthorize",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AutoLiquify(uint256,uint256)": EventFragment;
    "BuybackMultiplierActive(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutoLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuybackMultiplierActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type AutoLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _amountFTMLiquidity: BigNumber; _amountToLiquify: BigNumber }
>;

export type AutoLiquifyEventFilter = TypedEventFilter<AutoLiquifyEvent>;

export type BuybackMultiplierActiveEvent = TypedEvent<
  [BigNumber],
  { _duration: BigNumber }
>;

export type BuybackMultiplierActiveEventFilter =
  TypedEventFilter<BuybackMultiplierActiveEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Void extends BaseContract {
  contractName: "Void";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoidInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    EP(overrides?: CallOverrides): Promise<[string]>;

    MASK(overrides?: CallOverrides): Promise<[BigNumber]>;

    VestingSaleAddress(overrides?: CallOverrides): Promise<[string]>;

    WFTM(overrides?: CallOverrides): Promise<[string]>;

    _maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveMax(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    autoBuybackEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    autoLiquidityReceiver(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkFree(holder: string, overrides?: CallOverrides): Promise<[boolean]>;

    clearBuybackMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    developerFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    distributorAddress(overrides?: CallOverrides): Promise<[string]>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityBacking(
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    isAuthorized(adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isFree(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOverLiquified(
      target: BigNumberish,
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    launch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    launchedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    launchedAtTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketingFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    routerAddress(overrides?: CallOverrides): Promise<[string]>;

    setAutoBuybackSettings(
      _enabled: boolean,
      _cap: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuybackMultiplierSettings(
      numerator: BigNumberish,
      denominator: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributorSettings(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeReceivers(
      _autoLiquidityReceiver: string,
      _marketingFeeReceiver: string,
      _treasurerFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _reflectionFee: BigNumberish,
      _marketingFee: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFree(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsDividendExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsFeeExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsTxLimitExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxWallet(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardAmounts(
      _rewardFeeAmount: BigNumberish,
      _rewardSellFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapBackSettings(
      _enabled: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetLiquidity(
      _target: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTxLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasurerFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    unSetFree(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  EP(overrides?: CallOverrides): Promise<string>;

  MASK(overrides?: CallOverrides): Promise<BigNumber>;

  VestingSaleAddress(overrides?: CallOverrides): Promise<string>;

  WFTM(overrides?: CallOverrides): Promise<string>;

  _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    holder: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveMax(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorize(
    adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  autoBuybackEnabled(overrides?: CallOverrides): Promise<boolean>;

  autoLiquidityReceiver(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkFree(holder: string, overrides?: CallOverrides): Promise<boolean>;

  clearBuybackMultiplier(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  developerFeeReceiver(overrides?: CallOverrides): Promise<string>;

  distributorAddress(overrides?: CallOverrides): Promise<string>;

  getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityBacking(
    accuracy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalFee(overrides?: CallOverrides): Promise<BigNumber>;

  isAuthorized(adr: string, overrides?: CallOverrides): Promise<boolean>;

  isFree(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isOverLiquified(
    target: BigNumberish,
    accuracy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  launch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

  launchedAtTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  marketingFeeReceiver(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  routerAddress(overrides?: CallOverrides): Promise<string>;

  setAutoBuybackSettings(
    _enabled: boolean,
    _cap: BigNumberish,
    _amount: BigNumberish,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuybackMultiplierSettings(
    numerator: BigNumberish,
    denominator: BigNumberish,
    length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionCriteria(
    _minPeriod: BigNumberish,
    _minDistribution: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributorSettings(
    gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeReceivers(
    _autoLiquidityReceiver: string,
    _marketingFeeReceiver: string,
    _treasurerFeeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _liquidityFee: BigNumberish,
    _buybackFee: BigNumberish,
    _reflectionFee: BigNumberish,
    _marketingFee: BigNumberish,
    _feeDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFree(
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsDividendExempt(
    holder: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsFeeExempt(
    holder: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsTxLimitExempt(
    holder: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxWallet(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardAmounts(
    _rewardFeeAmount: BigNumberish,
    _rewardSellFeeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapBackSettings(
    _enabled: boolean,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetLiquidity(
    _target: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTxLimit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasurerFeeReceiver(overrides?: CallOverrides): Promise<string>;

  unSetFree(
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unauthorize(
    adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Collect(overrides?: CallOverrides): Promise<void>;

    EP(overrides?: CallOverrides): Promise<string>;

    MASK(overrides?: CallOverrides): Promise<BigNumber>;

    VestingSaleAddress(overrides?: CallOverrides): Promise<string>;

    WFTM(overrides?: CallOverrides): Promise<string>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveMax(spender: string, overrides?: CallOverrides): Promise<boolean>;

    authorize(adr: string, overrides?: CallOverrides): Promise<void>;

    autoBuybackEnabled(overrides?: CallOverrides): Promise<boolean>;

    autoLiquidityReceiver(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkFree(holder: string, overrides?: CallOverrides): Promise<boolean>;

    clearBuybackMultiplier(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    developerFeeReceiver(overrides?: CallOverrides): Promise<string>;

    distributorAddress(overrides?: CallOverrides): Promise<string>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityBacking(
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalFee(overrides?: CallOverrides): Promise<BigNumber>;

    isAuthorized(adr: string, overrides?: CallOverrides): Promise<boolean>;

    isFree(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isOverLiquified(
      target: BigNumberish,
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    launch(overrides?: CallOverrides): Promise<void>;

    launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

    launchedAtTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    marketingFeeReceiver(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    routerAddress(overrides?: CallOverrides): Promise<string>;

    setAutoBuybackSettings(
      _enabled: boolean,
      _cap: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuybackMultiplierSettings(
      numerator: BigNumberish,
      denominator: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributorSettings(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReceivers(
      _autoLiquidityReceiver: string,
      _marketingFeeReceiver: string,
      _treasurerFeeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _reflectionFee: BigNumberish,
      _marketingFee: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFree(holder: string, overrides?: CallOverrides): Promise<void>;

    setIsDividendExempt(
      holder: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsFeeExempt(
      holder: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTxLimitExempt(
      holder: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWallet(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardAmounts(
      _rewardFeeAmount: BigNumberish,
      _rewardSellFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapBackSettings(
      _enabled: boolean,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetLiquidity(
      _target: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTxLimit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasurerFeeReceiver(overrides?: CallOverrides): Promise<string>;

    unSetFree(holder: string, overrides?: CallOverrides): Promise<void>;

    unauthorize(adr: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "AutoLiquify(uint256,uint256)"(
      _amountFTMLiquidity?: null,
      _amountToLiquify?: null
    ): AutoLiquifyEventFilter;
    AutoLiquify(
      _amountFTMLiquidity?: null,
      _amountToLiquify?: null
    ): AutoLiquifyEventFilter;

    "BuybackMultiplierActive(uint256)"(
      _duration?: null
    ): BuybackMultiplierActiveEventFilter;
    BuybackMultiplierActive(
      _duration?: null
    ): BuybackMultiplierActiveEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    Collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    EP(overrides?: CallOverrides): Promise<BigNumber>;

    MASK(overrides?: CallOverrides): Promise<BigNumber>;

    VestingSaleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    WFTM(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveMax(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    autoBuybackEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    autoLiquidityReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkFree(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    clearBuybackMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    developerFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    distributorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityBacking(
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalFee(overrides?: CallOverrides): Promise<BigNumber>;

    isAuthorized(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isFree(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOverLiquified(
      target: BigNumberish,
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    launchedAt(overrides?: CallOverrides): Promise<BigNumber>;

    launchedAtTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    marketingFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    routerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setAutoBuybackSettings(
      _enabled: boolean,
      _cap: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuybackMultiplierSettings(
      numerator: BigNumberish,
      denominator: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributorSettings(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeReceivers(
      _autoLiquidityReceiver: string,
      _marketingFeeReceiver: string,
      _treasurerFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFees(
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _reflectionFee: BigNumberish,
      _marketingFee: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFree(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsDividendExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsFeeExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsTxLimitExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxWallet(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardAmounts(
      _rewardFeeAmount: BigNumberish,
      _rewardSellFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapBackSettings(
      _enabled: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetLiquidity(
      _target: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTxLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasurerFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    unSetFree(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    EP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VestingSaleAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WFTM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveMax(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    autoBuybackEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autoLiquidityReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkFree(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearBuybackMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developerFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCirculatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityBacking(
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAuthorized(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFree(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOverLiquified(
      target: BigNumberish,
      accuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    launchedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchedAtTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketingFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutoBuybackSettings(
      _enabled: boolean,
      _cap: BigNumberish,
      _amount: BigNumberish,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuybackMultiplierSettings(
      numerator: BigNumberish,
      denominator: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionCriteria(
      _minPeriod: BigNumberish,
      _minDistribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributorSettings(
      gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceivers(
      _autoLiquidityReceiver: string,
      _marketingFeeReceiver: string,
      _treasurerFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _liquidityFee: BigNumberish,
      _buybackFee: BigNumberish,
      _reflectionFee: BigNumberish,
      _marketingFee: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFree(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsDividendExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsFeeExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsTxLimitExempt(
      holder: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxWallet(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardAmounts(
      _rewardFeeAmount: BigNumberish,
      _rewardSellFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapBackSettings(
      _enabled: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetLiquidity(
      _target: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTxLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasurerFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unSetFree(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
