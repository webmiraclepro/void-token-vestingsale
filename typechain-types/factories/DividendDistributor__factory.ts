/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DividendDistributor,
  DividendDistributorInterface,
} from "../DividendDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "claimDividend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "dividendsPerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dividendsPerShareAccuracyFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_shareholder",
        type: "address",
      },
    ],
    name: "getUnpaidEarnings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minDistribution",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
    ],
    name: "process",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minDistribution",
        type: "uint256",
      },
    ],
    name: "setDistributionCriteria",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareholder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "shares",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalExcluded",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalRealised",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDistributed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDividends",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600180546001600160a01b03199081167382f0b8b456c1a451378467398982d4834b6829c11782556002805490911673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21790556ec097ce7bc90715b34b9f1000000000600c55600d55678ac7230489e80000600e5534801561007957600080fd5b5060405161118c38038061118c83398101604081905261009891610120565b6001600160a01b0381166100f25760405162461bcd60e51b815260206004820152601760248201527f5f726f75746572206973207a65726f2061646472657373000000000000000000604482015260640160405180910390fd5b600380546001600160a01b039092166001600160a01b03199283161790556000805490911633179055610150565b60006020828403121561013257600080fd5b81516001600160a01b038116811461014957600080fd5b9392505050565b61102d8061015f6000396000f3fe6080604052600436106100dd5760003560e01c8063ce7c2ac21161007f578063efca2eed11610059578063efca2eed14610224578063f0fc6bca1461023a578063ffb2c4791461024f578063ffd49c841461026f57600080fd5b8063ce7c2ac2146101af578063d0e30db014610206578063e2d2e2191461020e57600080fd5b80632d48e896116100bb5780632d48e8961461014d5780633a98ef391461016d5780634fab0ae814610183578063997664d71461019957600080fd5b806311ce023d146100e257806314b6ca961461010b57806328fd31981461012d575b600080fd5b3480156100ee57600080fd5b506100f8600c5481565b6040519081526020015b60405180910390f35b34801561011757600080fd5b5061012b610126366004610d66565b610285565b005b34801561013957600080fd5b506100f8610148366004610d4b565b61047d565b34801561015957600080fd5b5061012b610168366004610de4565b61052d565b34801561017957600080fd5b506100f860085481565b34801561018f57600080fd5b506100f8600e5481565b3480156101a557600080fd5b506100f860095481565b3480156101bb57600080fd5b506101eb6101ca366004610d4b565b60076020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610102565b61012b61055c565b34801561021a57600080fd5b506100f8600b5481565b34801561023057600080fd5b506100f8600a5481565b34801561024657600080fd5b5061012b610842565b34801561025b57600080fd5b5061012b61026a366004610db2565b61084d565b34801561027b57600080fd5b506100f8600d5481565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102a957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040902054156102dd576102dd82610974565b600081118015610310575073ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040902054155b1561039b576004805473ffffffffffffffffffffffffffffffffffffffff84166000818152600560205260408120839055600183018455929092527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556103db565b801580156103cd575073ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604090205415155b156103db576103db82610aec565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604090205460085461041991839161041391610c76565b90610c89565b60085573ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040902081905561044d81610c95565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526007602052604090206001019190915550565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760205260408120546104af57506000919050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600760205260408120546104de90610c95565b73ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090206001015490915080821161051b575060009392505050565b6105258282610c76565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461055157600080fd5b600d91909155600e55565b60005473ffffffffffffffffffffffffffffffffffffffff16331461058057600080fd5b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156105ea57600080fd5b505afa1580156105fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106229190610dcb565b60408051600280825260608201835292935060009290916020830190803683375050600254825192935073ffffffffffffffffffffffffffffffffffffffff169183915060009061067557610675610fc8565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015260018054835192169183919081106106b2576106b2610fc8565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526003546040517fb6f9de9500000000000000000000000000000000000000000000000000000000815291169063b6f9de9590349061071e90600090869030904290600401610e06565b6000604051808303818588803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b50506001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009450610800935086925073ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190610dcb565b90610c76565b6009549091506108109082610c89565b600955600854600c5461083a916108319161082b9085610cb8565b90610cc4565b600b5490610c89565b600b55505050565b61084b33610974565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461087157600080fd5b6004548061087d575050565b6000805a905060005b848310801561089457508381105b1561096d5783600f54106108a8576000600f555b6108e76004600f54815481106108c0576108c0610fc8565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16610cd0565b1561092b5761092b6004600f548154811061090457610904610fc8565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16610974565b6109406109395a8490610c76565b8490610c89565b92505a600f8054919350600061095583610f31565b9190505550808061096590610f31565b915050610886565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760205260409020546109a15750565b60006109ac8261047d565b90508015610ae857600a546109c19082610c89565b600a556001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610a3857600080fd5b505af1158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a709190610d90565b5073ffffffffffffffffffffffffffffffffffffffff821660009081526006602090815260408083204290556007909152902060020154610ab19082610c89565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260076020526040902060028101919091555461044d90610c95565b5050565b60048054610afc90600190610f1a565b81548110610b0c57610b0c610fc8565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff84811684526005909252604090922054600480549290931692918110610b5757610b57610fc8565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff948516179055918316815260059182905260408120546004805491939291610bc890600190610f1a565b81548110610bd857610bd8610fc8565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020556004805480610c1b57610c1b610f99565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550565b6000610c828284610f1a565b9392505050565b6000610c828284610e8a565b6000610cb2600c5461082b600b5485610cb890919063ffffffff16565b92915050565b6000610c828284610edd565b6000610c828284610ea2565b600d5473ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604081205490914291610d079190610e8a565b108015610cb25750600e54610d1b8361047d565b1192915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d4657600080fd5b919050565b600060208284031215610d5d57600080fd5b610c8282610d22565b60008060408385031215610d7957600080fd5b610d8283610d22565b946020939093013593505050565b600060208284031215610da257600080fd5b81518015158114610c8257600080fd5b600060208284031215610dc457600080fd5b5035919050565b600060208284031215610ddd57600080fd5b5051919050565b60008060408385031215610df757600080fd5b50508035926020909101359150565b600060808201868352602060808185015281875180845260a086019150828901935060005b81811015610e5d57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101610e2b565b505073ffffffffffffffffffffffffffffffffffffffff9690961660408501525050506060015292915050565b60008219821115610e9d57610e9d610f6a565b500190565b600082610ed8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f1557610f15610f6a565b500290565b600082821015610f2c57610f2c610f6a565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f6357610f63610f6a565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220ac586720797ebec5ebc8a19a0984a8dd1104330d6f7438aff36cdf43f507147164736f6c63430008070033";

type DividendDistributorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DividendDistributorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DividendDistributor__factory extends ContractFactory {
  constructor(...args: DividendDistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "DividendDistributor";
  }

  deploy(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DividendDistributor> {
    return super.deploy(
      _router,
      overrides || {}
    ) as Promise<DividendDistributor>;
  }
  getDeployTransaction(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_router, overrides || {});
  }
  attach(address: string): DividendDistributor {
    return super.attach(address) as DividendDistributor;
  }
  connect(signer: Signer): DividendDistributor__factory {
    return super.connect(signer) as DividendDistributor__factory;
  }
  static readonly contractName: "DividendDistributor";
  public readonly contractName: "DividendDistributor";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DividendDistributorInterface {
    return new utils.Interface(_abi) as DividendDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DividendDistributor {
    return new Contract(address, _abi, signerOrProvider) as DividendDistributor;
  }
}
