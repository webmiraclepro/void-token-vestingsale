/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DividendDistributor,
  DividendDistributorInterface,
} from "../DividendDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "claimDividend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "dividendsPerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dividendsPerShareAccuracyFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_shareholder",
        type: "address",
      },
    ],
    name: "getTotalRealised",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_shareholder",
        type: "address",
      },
    ],
    name: "getUnpaidEarnings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minDistribution",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
    ],
    name: "process",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minDistribution",
        type: "uint256",
      },
    ],
    name: "setDistributionCriteria",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareholder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "shares",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalExcluded",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalRealised",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDistributed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDividends",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600180546001600160a01b0319908116736b175474e89094c44da98b954eedeac495271d0f1782556002805490911673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21790556ec097ce7bc90715b34b9f1000000000600c55600d55678ac7230489e80000600e5534801561007957600080fd5b506040516111dd3803806111dd83398101604081905261009891610120565b6001600160a01b0381166100f25760405162461bcd60e51b815260206004820152601760248201527f5f726f75746572206973207a65726f2061646472657373000000000000000000604482015260640160405180910390fd5b600380546001600160a01b039092166001600160a01b03199283161790556000805490911633179055610150565b60006020828403121561013257600080fd5b81516001600160a01b038116811461014957600080fd5b9392505050565b61107e8061015f6000396000f3fe6080604052600436106100e85760003560e01c8063aa39dda91161008a578063efca2eed11610059578063efca2eed14610275578063f0fc6bca1461028b578063ffb2c479146102a0578063ffd49c84146102c057600080fd5b8063aa39dda9146101ba578063ce7c2ac214610200578063d0e30db014610257578063e2d2e2191461025f57600080fd5b80632d48e896116100c65780632d48e896146101585780633a98ef39146101785780634fab0ae81461018e578063997664d7146101a457600080fd5b806311ce023d146100ed57806314b6ca961461011657806328fd319814610138575b600080fd5b3480156100f957600080fd5b50610103600c5481565b6040519081526020015b60405180910390f35b34801561012257600080fd5b50610136610131366004610db7565b6102d6565b005b34801561014457600080fd5b50610103610153366004610d9c565b6104ce565b34801561016457600080fd5b50610136610173366004610e35565b61057e565b34801561018457600080fd5b5061010360085481565b34801561019a57600080fd5b50610103600e5481565b3480156101b057600080fd5b5061010360095481565b3480156101c657600080fd5b506101036101d5366004610d9c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090206002015490565b34801561020c57600080fd5b5061023c61021b366004610d9c565b60076020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161010d565b6101366105ad565b34801561026b57600080fd5b50610103600b5481565b34801561028157600080fd5b50610103600a5481565b34801561029757600080fd5b50610136610893565b3480156102ac57600080fd5b506101366102bb366004610e03565b61089e565b3480156102cc57600080fd5b50610103600d5481565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102fa57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600760205260409020541561032e5761032e826109c5565b600081118015610361575073ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040902054155b156103ec576004805473ffffffffffffffffffffffffffffffffffffffff84166000818152600560205260408120839055600183018455929092527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909117905561042c565b8015801561041e575073ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604090205415155b1561042c5761042c82610b3d565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604090205460085461046a91839161046491610cc7565b90610cda565b60085573ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040902081905561049e81610ce6565b73ffffffffffffffffffffffffffffffffffffffff90921660009081526007602052604090206001019190915550565b73ffffffffffffffffffffffffffffffffffffffff811660009081526007602052604081205461050057506000919050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604081205461052f90610ce6565b73ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090206001015490915080821161056c575060009392505050565b6105768282610cc7565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105a257600080fd5b600d91909155600e55565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d157600080fd5b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561063b57600080fd5b505afa15801561064f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106739190610e1c565b60408051600280825260608201835292935060009290916020830190803683375050600254825192935073ffffffffffffffffffffffffffffffffffffffff16918391506000906106c6576106c6611019565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600180548351921691839190811061070357610703611019565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526003546040517fb6f9de9500000000000000000000000000000000000000000000000000000000815291169063b6f9de9590349061076f90600090869030904290600401610e57565b6000604051808303818588803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b50506001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009450610851935086925073ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561081357600080fd5b505afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b9190610e1c565b90610cc7565b6009549091506108619082610cda565b600955600854600c5461088b916108829161087c9085610d09565b90610d15565b600b5490610cda565b600b55505050565b61089c336109c5565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108c257600080fd5b600454806108ce575050565b6000805a905060005b84831080156108e557508381105b156109be5783600f54106108f9576000600f555b6109386004600f548154811061091157610911611019565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16610d21565b1561097c5761097c6004600f548154811061095557610955611019565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff166109c5565b61099161098a5a8490610cc7565b8490610cda565b92505a600f805491935060006109a683610f82565b919050555080806109b690610f82565b9150506108d7565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760205260409020546109f25750565b60006109fd826104ce565b90508015610b3957600a54610a129082610cda565b600a556001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610a8957600080fd5b505af1158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190610de1565b5073ffffffffffffffffffffffffffffffffffffffff821660009081526006602090815260408083204290556007909152902060020154610b029082610cda565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260076020526040902060028101919091555461049e90610ce6565b5050565b60048054610b4d90600190610f6b565b81548110610b5d57610b5d611019565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff84811684526005909252604090922054600480549290931692918110610ba857610ba8611019565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff948516179055918316815260059182905260408120546004805491939291610c1990600190610f6b565b81548110610c2957610c29611019565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020556004805480610c6c57610c6c610fea565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550565b6000610cd38284610f6b565b9392505050565b6000610cd38284610edb565b6000610d03600c5461087c600b5485610d0990919063ffffffff16565b92915050565b6000610cd38284610f2e565b6000610cd38284610ef3565b600d5473ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604081205490914291610d589190610edb565b108015610d035750600e54610d6c836104ce565b1192915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d9757600080fd5b919050565b600060208284031215610dae57600080fd5b610cd382610d73565b60008060408385031215610dca57600080fd5b610dd383610d73565b946020939093013593505050565b600060208284031215610df357600080fd5b81518015158114610cd357600080fd5b600060208284031215610e1557600080fd5b5035919050565b600060208284031215610e2e57600080fd5b5051919050565b60008060408385031215610e4857600080fd5b50508035926020909101359150565b600060808201868352602060808185015281875180845260a086019150828901935060005b81811015610eae57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101610e7c565b505073ffffffffffffffffffffffffffffffffffffffff9690961660408501525050506060015292915050565b60008219821115610eee57610eee610fbb565b500190565b600082610f29577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f6657610f66610fbb565b500290565b600082821015610f7d57610f7d610fbb565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fb457610fb4610fbb565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220f00809f20535a040b409d367b37f68bb5e9c6e87112af49abe54682dbaf2893364736f6c63430008070033";

type DividendDistributorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DividendDistributorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DividendDistributor__factory extends ContractFactory {
  constructor(...args: DividendDistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "DividendDistributor";
  }

  deploy(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DividendDistributor> {
    return super.deploy(
      _router,
      overrides || {}
    ) as Promise<DividendDistributor>;
  }
  getDeployTransaction(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_router, overrides || {});
  }
  attach(address: string): DividendDistributor {
    return super.attach(address) as DividendDistributor;
  }
  connect(signer: Signer): DividendDistributor__factory {
    return super.connect(signer) as DividendDistributor__factory;
  }
  static readonly contractName: "DividendDistributor";
  public readonly contractName: "DividendDistributor";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DividendDistributorInterface {
    return new utils.Interface(_abi) as DividendDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DividendDistributor {
    return new Contract(address, _abi, signerOrProvider) as DividendDistributor;
  }
}
